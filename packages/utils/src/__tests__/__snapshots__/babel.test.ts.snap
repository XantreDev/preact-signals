// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`@preact-signals/utils/macro > $derived transforms correctly 1`] = `
"import { computed as _computed } from "@preact-signals/utils/macro-helper";
const state = _computed(() => 10);
"
`;

exports[`@preact-signals/utils/macro > $useDerived transforms correctly 1`] = `
"import { useComputed as _useComputed } from "@preact-signals/utils/macro-helper";
const _ = () => {
  const state = _useComputed(() => 10);
};
"
`;

exports[`@preact-signals/utils/macro > Allows to export types 1`] = `
"export type * from "@preact-signals/utils/macro";
export type { a } from "@preact-signals/utils/macro";
export { type a } from "@preact-signals/utils/macro";
"
`;

exports[`@preact-signals/utils/macro > CJS import 1`] = `
"var _$ = require("@preact-signals/utils").$;
const a = _$(() => 1);
"
`;

exports[`@preact-signals/utils/macro > CJS import with multiple imports 1`] = `
"var _$ = require("@preact-signals/utils").$;
const { $useState } = require("@preact-signals/utils/macro");
_$(() => 10);
"
`;

exports[`@preact-signals/utils/macro > Correctly handles braces in arrow function if using object 1`] = `
"import { $ as _$ } from "@preact-signals/utils";
const a = _$(() => ({
  a: 1,
}));
"
`;

exports[`@preact-signals/utils/macro > Correctly work with references in object shorthand 1`] = `
"import { useDeepSignal as _useDeepSignal } from "@preact-signals/utils/hooks";
const _ = () => {
  let a = _useDeepSignal(() => 0);
  let b = _useDeepSignal(() => 0);
  const c = _useDeepSignal(() => 0);
  return {
    a: a.value,
    b: b.value,
    c: c.value,
  };
};
"
`;

exports[`@preact-signals/utils/macro > Deref is working 1`] = `
"import { deepSignal as _deepSignal } from "@preact-signals/utils";
let a = _deepSignal(10);
const aSig = a;
"
`;

exports[`@preact-signals/utils/macro > Deref is working inside other macro 1`] = `
"import { deepSignal as _deepSignal } from "@preact-signals/utils";
let a = _deepSignal(10);
const aSig = _deepSignal(a);
"
`;

exports[`@preact-signals/utils/macro > ESM import 1`] = `
"import { $ as _$ } from "@preact-signals/utils";
const a = _$(() => 1);
"
`;

exports[`@preact-signals/utils/macro > Must remove import event if not used 1`] = `""`;

exports[`@preact-signals/utils/macro > Optimizes nested components 1`] = `
"import { deepSignal as _deepSignal, $ as _$ } from "@preact-signals/utils";
let a = _deepSignal(10);
const _ = (
  <A>
    {_$(() => (
      <B prop={a.value}>{_$(() => a.value + 10)}</B>
    ))}
  </A>
);
"
`;

exports[`@preact-signals/utils/macro > Ref macro inside of state macro 1`] = `
"import { $ as _$, deepSignal as _deepSignal } from "@preact-signals/utils";
let a = _deepSignal(10);
let b = _deepSignal(_$(() => a.value));
"
`;

exports[`@preact-signals/utils/macro > Replaces $useState references 1`] = `
"import {
  useDeepSignal as _useDeepSignal,
  useSignalOfState as _useSignalOfState,
} from "@preact-signals/utils/hooks";
const _ = () => {
  let a = _useDeepSignal(() => 0);
  let b = _useDeepSignal(() => 0);
  const c = _useSignalOfState(0);
  a.value += 10;
  a.value.value += 10;
  a.value;
  a.value.value;
  b.value += 10;
  c.value.value += 10;
};
"
`;

exports[`@preact-signals/utils/macro > Should not wrap hooks 1`] = `
"import { useRef } from "react";
import { deepSignal as _deepSignal } from "@preact-signals/utils";
let a = _deepSignal(0);
const Component = () => {
  return <>{useRef(a.value).current}</>;
};
"
`;

exports[`@preact-signals/utils/macro > Should now fail on complex JSX 1`] = `
"import { deepSignal as _deepSignal, $ as _$ } from "@preact-signals/utils";
const a = _deepSignal(10);
const b = <>{_$(() => a.value * 10)}</>;
"
`;

exports[`@preact-signals/utils/macro > Should now fail on complex JSX 2`] = `
"import { deepSignal as _deepSignal, $ as _$ } from "@preact-signals/utils";
let a = _deepSignal(10);
let b = _deepSignal(20);
const c = <>{_$(() => a.value * b.value + 10)}</>;
const d = <>{() => a.value}</>;
"
`;

exports[`@preact-signals/utils/macro > Should optimize JSX 1`] = `
"import { deepSignal as _deepSignal } from "@preact-signals/utils";
const a = _deepSignal(10);
const b = <>{a}</>;
"
`;

exports[`@preact-signals/utils/macro > Should optimize nested statements 1`] = `
"import { useRef } from "react";
import { deepSignal as _deepSignal, $ as _$ } from "@preact-signals/utils";
let a = _deepSignal(0);
const Component = () => {
  return (
    <>{_$(() => (a.value > 10 ? <>{_$(() => a.value * 20)}</> : a.value))}</>
  );
};
"
`;

exports[`@preact-signals/utils/macro > Should transform by preset-env correctly 1`] = `
""use strict";

var _utils = require("@preact-signals/utils");
var _macroHelper = require("@preact-signals/utils/macro-helper");
const state = (0, _macroHelper.computed)(() => 10);
(0, _utils.$)(() => 10);
"
`;

exports[`@preact-signals/utils/macro > Should unwrap signals only inside of children element 1`] = `
"import { useRef } from "react";
import { deepSignal as _deepSignal } from "@preact-signals/utils";
let a = _deepSignal(0);
const Component = () => {
  return <a href={a.value}>{a}</a>;
};
"
`;

exports[`@preact-signals/utils/macro > State macro inside of ref macro 1`] = `
"import { $ as _$, deepSignal as _deepSignal } from "@preact-signals/utils";
let a = _deepSignal(10);
_$(() => a.value);
"
`;

exports[`@preact-signals/utils/macro > Top level macro works 1`] = `
"import { deepSignal as _deepSignal } from "@preact-signals/utils";
let a = _deepSignal(0);
effect(() => {
  console.log(a.value);
});
a.value += 10;
"
`;

exports[`@preact-signals/utils/macro > Transforms only resolved as macro: declared 1`] = `
"import { $ as _$ } from "@preact-signals/utils";
_$(() => 10);
{
  const $$ = () => 10;
  $$(10);
}
"
`;

exports[`@preact-signals/utils/macro > Transforms only resolved as macro: unresolved 1`] = `
"$$(10);
"
`;

exports[`@preact-signals/utils/macro > Working inside of scopes 1`] = `
"import { $ as _$ } from "@preact-signals/utils";
_$(() => 10);
{
  const a = $$(1);
  const $$ = 0;
  console.log($$);
}
"
`;

exports[`@preact-signals/utils/macro > is not break other imports (CJS) 1`] = `
"const React = require("react");
const { readFileSync } = require("fs");
const path = require("path");
"
`;

exports[`@preact-signals/utils/macro > is not break other imports 1`] = `
"import React from "react";
import { readFileSync } from "fs";
import * as path from "path";
"
`;

exports[`@preact-signals/utils/macro > is not breaking directives 1`] = `
""use client";
"use strict";

import { $ as _$ } from "@preact-signals/utils";
const a = _$(() => 1);
"
`;

exports[`@preact-signals/utils/macro > nested macro 1`] = `
"import { $ as _$ } from "@preact-signals/utils";
_$(() => _$(() => 1));
"
`;
